




class Solution {
public:
    int longestMountain(vector<int>& a) {
        //approach 1
     int n=a.size();
        vector<int> dp1(n,0),dp2(n,0);
        for(int i=1;i<n;i++){
            if(a[i-1]<a[i])dp1[i]=dp1[i-1]+1;
        }
        for(int i=n-2;i>=0;i--){
            if(a[i+1]<a[i])dp2[i]=dp2[i+1]+1;
        }
         for(auto x:dp1)cout<<x<<" ";
        cout<<endl;
         for(auto x:dp2)cout<<x<<" ";
        int maxi=0;
        for(int i=0;i<n;i++){
            if(dp1[i]+dp2[i]>=2&&dp1[i]!=0&&dp2[i]!=0)
                maxi=max(maxi,dp1[i]+dp2[i]+1);
        }
       
        return maxi;
    }
};








///////







class Solution {
public:
    int longestMountain(vector<int>& a) {
    //approach 2
        int n=a.size();
        int i=0,j=0;
        int ans=0;
        while(i<n){
            int j=i;
            if(j<n-1&&a[j]<a[j+1]){
            while(j<n-1&&a[j]<a[j+1])j++;
            if(j<n-1&&a[j]>a[j+1]){
            while(j<n-1&&a[j]>a[j+1])j++;
            ans=max(ans,j-i+1);j--;}}
            i=j;
            i++;
        }
        //if(ans>=3)
        return ans;
        return 0;
    }
};