// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
public:
    vector<vector<string>> displayContacts(int n, string a[], string s)
    {
        //approach 1
        vector<vector<string>> v;
        map<string,int> m;
        for(int i=0;i<n;i++)m[a[i]]++;
        vector<string> contact;
        for(auto x:m)contact.push_back(x.first);
        string l="";
        for(int i=0;i<s.length();i++){
            l+=s[i];
            vector<string> ans;
            for(int j=0;j<contact.size();j++){
                if(i+1<=contact[j].size()&&contact[j].substr(0,i+1)==l)
                {
                    ans.push_back(contact[j]);
                }
            }
            if(ans.empty()){ans.push_back("0");v.push_back(ans);}
            else
            v.push_back(ans);
        }
        return v;
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        string contact[n], s;
        for(int i = 0;i < n;i++)
            cin>>contact[i];
        cin>>s;
        
        Solution ob;
        vector<vector<string>> ans = ob.displayContacts(n, contact, s);
        for(int i = 0;i < s.size();i++){
            for(auto u: ans[i])
                cout<<u<<" ";
            cout<<"\n";
        }
    }
    return 0;
}  // } Driver Code Ends