// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
  bool dfs(int i, vector<int>& vis, vector<int>& res,vector<int> adj[]){
      if(vis[i]==0){
          vis[i]=1;
          res[i]=1;
          for(auto x:adj[i]){
              if(!vis[x]&&dfs(x,vis,res,adj))return true;
              else if(res[x])return true;
          }
          
      }
      res[i]=0;
          return false;
  }




	bool isPossible(int n, vector<pair<int, int> >& a) {
	    //directed cyclic graph
	    vector<int> adj[n];
	    for(auto x:a){
	       adj[x.first].push_back(x.second);
	    }
	   vector<int> vis(n,0),res(n,0);
	   
	   for(int i=0;i<n;i++){
	       if(vis[i]==0&&dfs(i,vis,res,adj))
	       return false;  
	   }
	   return true;
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
    	int N, P;
        vector<pair<int, int> > prerequisites;
        cin >> N;
        cin >> P;
        for (int i = 0; i < P; ++i) {
            int x, y;
            cin >> x >> y;
            prerequisites.push_back(make_pair(x, y));
        }
        // string s;
        // cin>>s;
        Solution ob;
        if (ob.isPossible(N, prerequisites))
            cout << "Yes";
        else
            cout << "No";
        cout << endl;
	}
	return 0;
}  // } Driver Code Ends