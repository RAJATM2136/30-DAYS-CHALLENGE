// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
    public:
    int dx[8]={0,1,1,1,0,-1,-1,-1};
    int dy[8]={-1,-1,0,1,1,1,0,-1};
    //Function to find unit area of the largest region of 1s.
    int dfs(vector<vector<int>>& m,vector<vector<int>>& vis,int i,int j){
        vis[i][j]=1;
        int ans=0;
        for(int k=0;k<8;k++){
            int i1=i+dx[k];
            int j1=j+dy[k];
            if(i1>=0&&j1>=0&&i1<=m.size()-1&&j1<=m[0].size()-1&&!vis[i1][j1]&&m[i1][j1]==1){
            vis[i1][j1]=1;
            if(m[i1][j1]==1){
            
            ans+=dfs(m,vis,i1,j1);
                }
                
                
            }
            
            
        }
       
       return (m[i][j]+ans); 
    }
    
    
    int findMaxArea(vector<vector<int>>& m) {
    vector<vector<int>> vis(m.size(),vector<int> (m[0].size(),0));
    
    int ans=INT_MIN;
    for(int i=0;i<m.size();i++){
        for(int j=0;j<m[0].size();j++){
            if(!vis[i][j]&&m[i][j])
            ans=max(ans,dfs(m,vis,i,j));
        }
    }
    return ans;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.findMaxArea(grid);
		cout << ans << "\n";
	}
	return 0;
}  // } Driver Code Ends