// { Driver Code Starts
#include <bits/stdc++.h> 
using namespace std; 

 // } Driver Code Ends
class Solution
{   
    public: 
    //Function to return a list of integers denoting spiral traversal of matrix.
    vector<int> spirallyTraverse(vector<vector<int> > m, int r, int c) 
    {
        vector<int> v;// to store answer
        int i=0,j=0;//iterators
        int a=0,b=0; //keeping count of 1st row and 1st column 
        int r2=r,c2=c; //tolimit size of v;
        while(i<(r2+1)/2&&v.size()!=r2*c2){//it will only travel row/2 times!!
            if(v.size()+1==r2*c2){
                v.push_back(m[i][j]);break;//corner case when one ele is left
            }
            
            while(j<c-1&&v.size()!=r2*c2)
            v.push_back(m[i][j]),j++;
            while(i<r-1&&v.size()!=r2*c2)
            v.push_back(m[i][j]),i++;
            while(j>b&&v.size()!=r2*c2)
            v.push_back(m[i][j]),j--;
            while(i>a&&v.size()!=r2*c2)
            v.push_back(m[i][j]),i--;
            if(i==j)i=(++a),j=(++b),r--,c--;
        }
        
        return v;
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin>>t;
    
    while(t--) 
    {
        int r,c;
        cin>>r>>c;
        vector<vector<int> > matrix(r); 

        for(int i=0; i<r; i++)
        {
            matrix[i].assign(c, 0);
            for( int j=0; j<c; j++)
            {
                cin>>matrix[i][j];
            }
        }

        Solution ob;
        vector<int> result = ob.spirallyTraverse(matrix, r, c);
        for (int i = 0; i < result.size(); ++i)
                cout<<result[i]<<" ";
        cout<<endl;
    }
    return 0;
}  // } Driver Code Ends