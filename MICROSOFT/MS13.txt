// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
	
	bool isPath(int startNode, int desNode, vector<int> adj[], vector<int> &isVisited){
        if(startNode == desNode){
            return true;
        }
        isVisited[startNode] = true;
        for(int node: adj[startNode]){
            if(!isVisited[node]){
                if(isPath(node, desNode, adj, isVisited)){
                    return true;
                }
            }
        }
        return false;
   }
    //Function to find if the given edge is a bridge in graph.
    int isBridge(int V, vector<int> adj[], int c, int d) 
    {
       vector<int> isVisited(V,false);
        
        for(int i=0;i<adj[c].size();i++){
            if(adj[c][i]==d)
            adj[c].erase(adj[c].begin()+i);
        }
         for(int i=0;i<adj[d].size();i++){
            if(adj[d][i]==c)
            adj[d].erase(adj[d].begin()+i);
        }
       return !isPath(c,d,adj,isVisited);
    }
};

// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        int i=0;
        while (i++<E) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back (v);
            adj[v].push_back (u);
        }
        
        int c,d;
        cin>>c>>d;
        
        Solution obj;
    	cout << obj.isBridge(V, adj, c, d) << "\n";
    }

    return 0;
}

  // } Driver Code Ends