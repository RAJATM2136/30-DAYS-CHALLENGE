// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
  int dx[4]={-1,1,0,0};
  int dy[4]={0,0,-1,1};

   bool dfs(vector<vector<char>>& board, string word,vector<vector<int>>& vis,int i,int j,int c){
       vis[i][j]=1;
       for(int k=0;k<4;k++){
           int i1=i+dx[k];
           int j1=j+dy[k];
           if(c==word.size())
           return true;
           if(i1>=0&&j1>=0&&i1<=board.size()-1&&j1<=board[0].size()-1&&vis[i1][j1]==0&&c<=word.size()-1&&board[i1][j1]==word[c]){
             if(dfs(board,word,vis,i1,j1,c+1))
             return true;
            
           }
       }
       return false;
   }



    bool isWordExist(vector<vector<char>>& board, string word) {
        vector<vector<int>> vis(board.size(),vector<int>(board[0].size(),0));
        vector<vector<int>> x(board.size(),vector<int>(board[0].size(),0));
        
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]==word[0]){
                    if(dfs(board,word,vis,i,j,1))
                    return true;
                    vis=x;
                    
                }
            }
        }
        return false;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>board(n, vector<char>(m, '*'));
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
				cin >> board[i][j];
		string word;
		cin >> word;
		Solution obj;
		bool ans = obj.isWordExist(board, word);
		if(ans)
			cout << "1\n";
		else cout << "0\n";
	}
	return 0;
}  // } Driver Code Ends