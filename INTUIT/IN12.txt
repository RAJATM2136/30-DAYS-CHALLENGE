class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
                vector<int> indegree(numCourses,0);
        vector<vector<int>> adjList(numCourses);
        for(int i=0;i<prerequisites.size();i++){
            indegree[prerequisites[i][0]]++;
            adjList[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }
        queue<int> q;
        vector<int> ans;
        for(int i=0;i<numCourses;++i) {
            if(!indegree[i])
                q.push(i);
        }
        while(!q.empty()) {
            auto curr = q.front();
            q.pop();
            ans.push_back(curr);
            for(int i=0;i<adjList[curr].size();++i) {
                indegree[adjList[curr][i]]--;
                if(!indegree[adjList[curr][i]])
                    q.push(adjList[curr][i]);
            }
        }
        //  Check for indegree to be 0. to check if there is no cycle
        for(int i=0;i<numCourses;++i){
            if(indegree[i]) {
                ans.clear();
                break;
            }
        }
        return ans;
    
        
        
    }
};